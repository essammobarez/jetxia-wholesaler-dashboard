// ReservationPreviewModal.tsx

import React from 'react';
import { Modal, Box, Typography, Button, Divider, Paper, Grid } from '@mui/material';
import { Building, MapPin, Calendar, Users, DollarSign, Edit, CheckCircle, X, Clock, Wallet, Info } from 'lucide-react';
import dayjs, { Dayjs } from 'dayjs';

// --- TYPES ---
// These types should ideally be shared from a central types file
type Traveller = {
  id: number;
  type: 'adult' | 'child';
  title: string;
  firstName: string;
  lastName: string;
  birthday: string | null;
  nationality: string;
};

type Room = {
  id: number;
  roomName: string;
  board: string;
  price: string;
  travellers: Traveller[];
};

type Policy = {
  id: number;
  type: string;
  date: Dayjs | null;
  price: string;
};

type PreviewData = {
  agencyName: string;
  selectedHotelDetails: {
    name: string;
    location: { city: string; countryCode: string };
  } | null;
  checkIn: Dayjs | null;
  checkOut: Dayjs | null;
  rooms: Room[];
  supplierPrice: string;
  markup: string;
  totalPrice: string;
  currency: string;
  cancellationPolicies: Policy[];
  paymentMethod: string;
  paymentDeadline: Dayjs | null;
  agencyData: { walletBalance: number };
  supplierName: string;
  supplierConfirmation: string;
  externalId: string;
};

type Props = {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  isSubmitting: boolean;
  data: PreviewData;
};

// --- HELPER COMPONENTS for better layout ---
const InfoRow: React.FC<{ icon: React.ReactNode; label: string; value: React.ReactNode }> = ({ icon, label, value }) => (
  <div className="flex items-start mb-2">
    <div className="flex-shrink-0 w-6 h-6 text-gray-500">{icon}</div>
    <div className="ml-3 flex-1">
      <p className="text-sm font-medium text-gray-600">{label}</p>
      <p className="text-md font-semibold text-gray-900">{value || 'N/A'}</p>
    </div>
  </div>
);

const Section: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => (
  <Paper variant="outlined" className="p-4 mb-4 rounded-lg">
    <Typography variant="h6" gutterBottom component="h3" className="font-semibold text-gray-800">
      {title}
    </Typography>
    <Divider className="mb-4" />
    {children}
  </Paper>
);


// --- MAIN MODAL COMPONENT ---
const ReservationPreviewModal: React.FC<Props> = ({ isOpen, onClose, onConfirm, isSubmitting, data }) => {
  const modalStyle = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: '90%',
    maxWidth: 900,
    bgcolor: 'background.paper',
    boxShadow: 24,
    p: 4,
    borderRadius: 2,
    maxHeight: '90vh',
    overflowY: 'auto',
  };

  const currencySymbol = data.currency || 'USD';
  const duration = data.checkOut && data.checkIn ? data.checkOut.diff(data.checkIn, 'days') : 0;


  return (
    <Modal open={isOpen} onClose={onClose}>
      <Box sx={modalStyle}>
        <div className="flex justify-between items-center mb-4">
          <Typography variant="h5" component="h2" className="font-bold text-gray-900">
            Reservation Preview
          </Typography>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-800">
            <X size={24} />
          </button>
        </div>

        <Grid container spacing={3}>
          {/* Left Column */}
          <Grid item xs={12} md={6}>
            <Section title="Booking Details">
              <InfoRow icon={<Building size={20} />} label="Agency" value={data.agencyName} />
              <InfoRow icon={<MapPin size={20} />} label="Hotel" value={data.selectedHotelDetails?.name} />
              <InfoRow icon={<MapPin size={20} />} label="Destination" value={`${data.selectedHotelDetails?.location.city}, ${data.selectedHotelDetails?.location.countryCode}`} />
            </Section>
            <Section title="Stay Information">
                 <InfoRow icon={<Calendar size={20} />} label="Check-in" value={data.checkIn?.format('ddd, MMM D, YYYY')} />
                 <InfoRow icon={<Calendar size={20} />} label="Check-out" value={data.checkOut?.format('ddd, MMM D, YYYY')} />
                 <InfoRow icon={<Clock size={20} />} label="Duration of Stay" value={`${duration} Night(s)`} />
            </Section>
            <Section title="Payment & Price">
                <InfoRow 
                    icon={data.paymentMethod === 'PAYLATER' ? <Clock size={20} /> : <Wallet size={20} />} 
                    label="Payment Method" 
                    value={<span className="font-bold text-blue-600">{data.paymentMethod}</span>}
                />
                 {data.paymentMethod === 'PAYLATER' && data.paymentDeadline && (
                    <InfoRow icon={<Info size={20} />} label="Payment Deadline" value={data.paymentDeadline.format('MMM D, YYYY')} />
                )}
                 {data.paymentMethod === 'CREDIT' && (
                    <InfoRow icon={<Info size={20} />} label="Available Credit" value={`${data.agencyData.walletBalance.toFixed(2)} ${currencySymbol}`} />
                )}
                <div className="mt-4 border-t pt-3">
                    <InfoRow icon={<DollarSign size={20} />} label="Supplier Price" value={`${data.supplierPrice} ${currencySymbol}`} />
                    <InfoRow icon={<DollarSign size={20} />} label="Markup" value={`${data.markup || 0}%`} />
                    <InfoRow icon={<DollarSign size={20} />} label="Total Price" value={<span className="text-xl text-green-600 font-bold">{`${data.totalPrice} ${currencySymbol}`}</span>} />
                </div>
            </Section>
          </Grid>

          {/* Right Column */}
          <Grid item xs={12} md={6}>
            <Section title="Rooms & Travellers">
              {data.rooms.map((room, index) => (
                <div key={room.id} className={`p-3 rounded-md bg-gray-50 ${index < data.rooms.length - 1 ? 'mb-3' : ''}`}>
                  <div className="flex justify-between items-center">
                    <p className="font-semibold text-md text-gray-800">{`Room ${index + 1}: ${room.roomName}`}</p>
                    <p className="font-bold text-md text-blue-700">{`${room.price} ${currencySymbol}`}</p>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{`Board: ${room.board}`}</p>
                  <Divider/>
                  <ul className="mt-2 list-none">
                    {room.travellers.map(t => (
                      <li key={t.id} className="text-sm text-gray-700">{`${t.title} ${t.firstName} ${t.lastName} (${t.type})`}</li>
                    ))}
                  </ul>
                </div>
              ))}
            </Section>
            <Section title="Cancellation Policy">
                {data.cancellationPolicies.length > 0 ? (
                    <ul className="list-disc pl-5 space-y-2">
                        {data.cancellationPolicies.map(policy => (
                            <li key={policy.id} className="text-sm">
                                <span className="font-semibold">{policy.type === 'FREE' ? 'Free Cancellation' : 'Charge Applies'}</span> until
                                <span className="font-semibold text-red-600"> {policy.date?.format('MMM D, YYYY')}</span>.
                                Charge: <span className="font-semibold">{`${policy.price} ${currencySymbol}`}</span>.
                            </li>
                        ))}
                    </ul>
                ) : <p className="text-sm text-gray-500">No cancellation policies specified.</p>}
            </Section>
          </Grid>
        </Grid>


        {/* Modal Actions */}
        <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
          <Button variant="outlined" startIcon={<Edit />} onClick={onClose}>
            Edit
          </Button>
          <Button
            variant="contained"
            color="primary"
            startIcon={<CheckCircle />}
            onClick={onConfirm}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Confirming...' : 'Booking Confirm'}
          </Button>
        </Box>
      </Box>
    </Modal>
  );
};

export default ReservationPreviewModal;